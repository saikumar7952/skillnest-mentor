
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { ArrowLeft, BookOpen, Code, Video, Check, Clock } from 'lucide-react';
import Navbar from '@/components/Navbar';
import Footer from '@/components/Footer';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Separator } from '@/components/ui/separator';

const LearningPath = () => {
  const navigate = useNavigate();
  const [currentGoal, setCurrentGoal] = useState('Frontend Developer');
  const [overallProgress, setOverallProgress] = useState(35);
  
  // In a real app, these would be dynamically generated by the AI
  const learningModules = [
    {
      id: 1,
      title: 'React Fundamentals',
      description: 'Master core React concepts and hooks',
      progress: 80,
      status: 'in-progress',
      estimatedTime: '4 weeks',
      resources: [
        { type: 'video', title: 'React Hooks Deep Dive', completed: true },
        { type: 'code', title: 'Build a Todo App with React', completed: true },
        { type: 'reading', title: 'Understanding React Component Lifecycle', completed: false },
        { type: 'code', title: 'State Management with Context API', completed: false }
      ]
    },
    {
      id: 2,
      title: 'Modern CSS Techniques',
      description: 'Advanced CSS layouts and responsive design',
      progress: 60,
      status: 'in-progress',
      estimatedTime: '3 weeks',
      resources: [
        { type: 'video', title: 'CSS Grid In-Depth', completed: true },
        { type: 'code', title: 'Building Responsive Layouts', completed: true },
        { type: 'reading', title: 'CSS Custom Properties', completed: false },
        { type: 'code', title: 'Animation and Transitions', completed: false }
      ]
    },
    {
      id: 3,
      title: 'TypeScript for React',
      description: 'Adding type safety to your React applications',
      progress: 20,
      status: 'in-progress',
      estimatedTime: '5 weeks',
      resources: [
        { type: 'video', title: 'TypeScript Fundamentals', completed: true },
        { type: 'code', title: 'Converting a React App to TypeScript', completed: false },
        { type: 'reading', title: 'Advanced Types in TypeScript', completed: false },
        { type: 'code', title: 'Building Custom Hooks with TypeScript', completed: false }
      ]
    },
    {
      id: 4,
      title: 'Performance Optimization',
      description: 'Techniques to improve React app performance',
      progress: 0,
      status: 'not-started',
      estimatedTime: '3 weeks',
      resources: [
        { type: 'video', title: 'React Performance Profiling', completed: false },
        { type: 'code', title: 'Implementing Memoization', completed: false },
        { type: 'reading', title: 'Lazy Loading and Code Splitting', completed: false },
        { type: 'code', title: 'Optimizing Re-renders', completed: false }
      ]
    },
    {
      id: 5,
      title: 'Testing React Applications',
      description: 'Master testing techniques for React',
      progress: 0,
      status: 'not-started',
      estimatedTime: '4 weeks',
      resources: [
        { type: 'video', title: 'Jest and React Testing Library', completed: false },
        { type: 'code', title: 'Writing Component Tests', completed: false },
        { type: 'reading', title: 'Test-Driven Development', completed: false },
        { type: 'code', title: 'E2E Testing with Cypress', completed: false }
      ]
    }
  ];
  
  const getResourceIcon = (type) => {
    switch(type) {
      case 'video': return <Video className="h-4 w-4" />;
      case 'code': return <Code className="h-4 w-4" />;
      case 'reading': return <BookOpen className="h-4 w-4" />;
      default: return <BookOpen className="h-4 w-4" />;
    }
  };
  
  const getStatusBadge = (status) => {
    switch(status) {
      case 'completed':
        return <span className="text-xs px-2 py-0.5 rounded-full bg-green-100 text-green-800 flex items-center gap-1"><Check className="h-3 w-3" /> Completed</span>;
      case 'in-progress':
        return <span className="text-xs px-2 py-0.5 rounded-full bg-blue-100 text-blue-800 flex items-center gap-1"><Clock className="h-3 w-3" /> In Progress</span>;
      case 'not-started':
        return <span className="text-xs px-2 py-0.5 rounded-full bg-gray-100 text-gray-800">Not Started</span>;
      default:
        return null;
    }
  };
  
  return (
    <div className="min-h-screen flex flex-col">
      <Navbar />
      
      <div className="container-custom max-w-screen-lg py-8 flex-1">
        <button 
          onClick={() => navigate('/roadmap')} 
          className="flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground mb-6"
        >
          <ArrowLeft className="h-4 w-4" />
          Back to Roadmap
        </button>
        
        <div className="flex flex-col items-center text-center mb-8">
          <h1 className="text-3xl font-medium mb-2">Your AI Learning Path</h1>
          <p className="text-muted-foreground max-w-2xl">
            Personalized learning roadmap generated by our AI based on your goals, skills, and learning style
          </p>
        </div>
        
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>Career Goal: {currentGoal}</CardTitle>
            <CardDescription>
              Your personalized learning journey to become a {currentGoal}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm font-medium">Overall Progress</span>
                  <span className="text-sm font-medium">{overallProgress}%</span>
                </div>
                <Progress value={overallProgress} className="h-2" />
              </div>
              
              <div className="grid md:grid-cols-3 gap-4">
                <div className="border rounded-lg p-4">
                  <div className="text-sm text-muted-foreground mb-1">Estimated Time to Goal</div>
                  <div className="font-medium">4-6 months</div>
                </div>
                <div className="border rounded-lg p-4">
                  <div className="text-sm text-muted-foreground mb-1">Current Focus</div>
                  <div className="font-medium">React & TypeScript</div>
                </div>
                <div className="border rounded-lg p-4">
                  <div className="text-sm text-muted-foreground mb-1">Next Milestone</div>
                  <div className="font-medium">Building Portfolio Projects</div>
                </div>
              </div>
              
              <div className="flex flex-col sm:flex-row justify-end gap-3 pt-2">
                <Button variant="outline">Edit Learning Preferences</Button>
                <Button>Update Skills Profile</Button>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <div className="space-y-6">
          {learningModules.map((module) => (
            <Card key={module.id}>
              <CardHeader className="pb-3">
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle>{module.title}</CardTitle>
                    <CardDescription>{module.description}</CardDescription>
                  </div>
                  <div className="flex items-center gap-2">
                    {getStatusBadge(module.status)}
                    <div className="text-sm font-medium">{module.progress}%</div>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="mb-4">
                  <Progress value={module.progress} className="h-2" />
                </div>
                
                <div className="text-sm text-muted-foreground flex items-center gap-2 mb-4">
                  <Clock className="h-4 w-4" />
                  <span>Estimated time: {module.estimatedTime}</span>
                </div>
                
                <Separator className="my-4" />
                
                <div className="space-y-3">
                  <h4 className="font-medium">Learning Resources</h4>
                  <div className="grid md:grid-cols-2 gap-3">
                    {module.resources.map((resource, index) => (
                      <div key={index} className="flex items-center gap-3 p-3 bg-secondary rounded-lg">
                        <div className="p-2 bg-background rounded-md">
                          {getResourceIcon(resource.type)}
                        </div>
                        <div className="flex-1 min-w-0">
                          <div className="text-sm font-medium truncate">{resource.title}</div>
                          <div className="text-xs text-muted-foreground capitalize">{resource.type}</div>
                        </div>
                        {resource.completed ? (
                          <div className="h-5 w-5 bg-green-100 text-green-800 rounded-full flex items-center justify-center">
                            <Check className="h-3 w-3" />
                          </div>
                        ) : (
                          <div className="h-5 w-5 border border-muted rounded-full"></div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
                
                <div className="mt-4 flex justify-end">
                  <Button variant={module.status === 'not-started' ? 'default' : 'outline'}>
                    {module.status === 'not-started' ? 'Begin Module' : 'Continue Learning'}
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
      
      <Footer />
    </div>
  );
};

export default LearningPath;
